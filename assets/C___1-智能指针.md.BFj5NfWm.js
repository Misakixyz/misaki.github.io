import{_ as s,o as a,c as i,a7 as t}from"./chunks/framework.Pik4XaBc.js";const c=JSON.parse('{"title":"智能指针","description":"关于智能指针的一些认识","frontmatter":{"title":"智能指针","description":"关于智能指针的一些认识","tags":"C++, 智能指针, 指针","comment":true,"date":"2023-10-04T00:00:00.000Z","outline":[2,3]},"headers":[],"relativePath":"C++/1-智能指针.md","filePath":"C++/1-智能指针.md","lastUpdated":1717661601000}'),h={name:"C++/1-智能指针.md"},e=t(`<h2 id="动态内存与智能指针" tabindex="-1">动态内存与智能指针 <a class="header-anchor" href="#动态内存与智能指针" aria-label="Permalink to &quot;动态内存与智能指针&quot;">​</a></h2><p>C++的动态内存管理通过一对运算符完成: new, delete</p><p><code>添加头文件&lt;memory&gt;中启动</code></p><h3 id="new" tabindex="-1">new <a class="header-anchor" href="#new" aria-label="Permalink to &quot;new&quot;">​</a></h3><p>在动态内存中为对象分配空间并返回一个指向该对象的指针，我们可以选择对象进行初始化</p><h3 id="delete" tabindex="-1">delete <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;delete&quot;">​</a></h3><p>接受一个动态对象的指针，销毁该对象，并释放与之关联的内存</p><h3 id="shared-ptr" tabindex="-1">shared_ptr <a class="header-anchor" href="#shared-ptr" aria-label="Permalink to &quot;shared_ptr&quot;">​</a></h3><p>允许多个指针指向一个对象</p><h3 id="unique-ptr" tabindex="-1">unique_ptr <a class="header-anchor" href="#unique-ptr" aria-label="Permalink to &quot;unique_ptr&quot;">​</a></h3><p>“独占”所指对象</p><h3 id="weak-ptr" tabindex="-1">weak_ptr <a class="header-anchor" href="#weak-ptr" aria-label="Permalink to &quot;weak_ptr&quot;">​</a></h3><p>弱引用，指向 shared_ptr 所管理的对象</p><h2 id="shared-ptr-指针" tabindex="-1">shared_ptr 指针 <a class="header-anchor" href="#shared-ptr-指针" aria-label="Permalink to &quot;shared_ptr 指针&quot;">​</a></h2><p>采用模板创建</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p2</span></span></code></pre></div><h3 id="make-shared-函数" tabindex="-1">make_shared 函数 <a class="header-anchor" href="#make-shared-函数" aria-label="Permalink to &quot;make_shared 函数&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指向一个值为42的int的shared_ptr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指向一个值为9999999999的string的shared_ptr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;9&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指向一个初始化值为0的int的shared_ptr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span></code></pre></div><p>通常使用 auto 来保存 make_shared 的结果</p><h3 id="shared-ptr-的拷贝与赋值" tabindex="-1">shared_ptr 的拷贝与赋值 <a class="header-anchor" href="#shared-ptr-的拷贝与赋值" aria-label="Permalink to &quot;shared_ptr 的拷贝与赋值&quot;">​</a></h3><p>当进行拷贝或赋值操作时,每个 shared_ptr 都会记录有多少个其他 shared_ptr 指向相同的对象</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p指向的对象只有p一个引用者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p和q指向相同对象，此对象有两个引用者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> q</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>可以认为：每个 shared_ptr 都有一个关联的计数器——引用计数器(reference count)。无论何时，拷贝一个 shared_ptr，计数器都会增加<br> 以下情况计数器递增：</p><ul><li>当用一个 shared_ptr 初始化另一个 shared_ptr</li><li>将它作为一个参数传递给一个函数</li><li>作为函数的返回值时</li></ul><p>以下情况计数器递减：</p><ul><li>给 shared_ptr 赋予新值时</li><li>shared_ptr 被销毁时（局部的 shared_ptr 离开其作用域时）</li></ul><h3 id="shared-ptr-自动销毁" tabindex="-1">shared_ptr 自动销毁 <a class="header-anchor" href="#shared-ptr-自动销毁" aria-label="Permalink to &quot;shared_ptr 自动销毁&quot;">​</a></h3>`,27),p=[e];function n(l,r,k,d,E,g){return a(),i("div",{"data-pagefind-body":!0},p)}const _=s(h,[["render",n]]);export{c as __pageData,_ as default};
