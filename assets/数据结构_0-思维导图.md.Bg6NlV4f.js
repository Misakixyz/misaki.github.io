import{_ as i,o as s,c as a,a7 as l}from"./chunks/framework.Pik4XaBc.js";const c=JSON.parse('{"title":"思维导图","description":"","frontmatter":{"title":"思维导图","comment":true,"date":"2023-11-23T00:00:00.000Z","hidden":true,"outline":[2,3]},"headers":[],"relativePath":"数据结构/0-思维导图.md","filePath":"数据结构/0-思维导图.md","lastUpdated":1717661601000}'),h={name:"数据结构/0-思维导图.md"},n=l(`<h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h1><h2 id="第一章-绪论" tabindex="-1">第一章 绪论 <a class="header-anchor" href="#第一章-绪论" aria-label="Permalink to &quot;第一章 绪论&quot;">​</a></h2><h3 id="_1-1-数据结构的概念" tabindex="-1">1.1 数据结构的概念 <a class="header-anchor" href="#_1-1-数据结构的概念" aria-label="Permalink to &quot;1.1 数据结构的概念&quot;">​</a></h3><h4 id="什么是数据结构" tabindex="-1">什么是数据结构 <a class="header-anchor" href="#什么是数据结构" aria-label="Permalink to &quot;什么是数据结构&quot;">​</a></h4><ul><li>描述非数值计算问题的数学模型</li></ul><h4 id="数据结构的意义" tabindex="-1">数据结构的意义 <a class="header-anchor" href="#数据结构的意义" aria-label="Permalink to &quot;数据结构的意义&quot;">​</a></h4><ul><li><p>算法 + 数据结构 = 程序</p></li><li><p>程序设计的本质是对实际问题选择一种好的数据结构，并设计一个好的算法</p></li><li><p>数据结构是介于数学、计算机硬件和软件三者之间的一门核心课程</p></li></ul><h3 id="_1-2-基本概念和术语" tabindex="-1">1.2 基本概念和术语 <a class="header-anchor" href="#_1-2-基本概念和术语" aria-label="Permalink to &quot;1.2 基本概念和术语&quot;">​</a></h3><h4 id="数据与数据元素" tabindex="-1">数据与数据元素 <a class="header-anchor" href="#数据与数据元素" aria-label="Permalink to &quot;数据与数据元素&quot;">​</a></h4><ul><li><p>数据（Data）是对客观事物的符号表示，它能被计算机识别、存储和加工处理</p></li><li><p>数据元素（Data Element）是数据的基本单位，又称元素、结点、顶点、记录</p><ul><li>一个数据元素又可以由多个数据项（Data Item）组成</li><li>数据项是最小标识单位</li></ul></li></ul><h4 id="数据的逻辑结构" tabindex="-1">数据的逻辑结构 <a class="header-anchor" href="#数据的逻辑结构" aria-label="Permalink to &quot;数据的逻辑结构&quot;">​</a></h4><ul><li><p>概念</p><ul><li>数据的逻辑结构是从逻辑关系上描述数据，不涉及数据在计算机中的存储，是独立于计算机的</li></ul></li><li><p>集合</p><ul><li>任何两个元素之间都没有逻辑关系，每个元素都是孤立的</li></ul></li><li><p>线性结构</p><ul><li>结构中的元素之间存在一对一的关系，即所谓的线性关系。四级考试成绩表就是一个线性结构</li></ul></li><li><p>树形结构</p><ul><li>结构中的数据元素之间存在一对多的关系，在这种结构中，元素之间的逻辑关系通常称作双亲与子女关系。例如，家谱、行政组织结构等都可用树形结构来表示</li></ul></li><li><p>图状结构</p><ul><li>结构中的元素之间存在多对多的关系。也就是说，元素间的逻辑关系可以是任意的。在这种结构中，元素间的逻辑关系也称作邻接关系。</li></ul></li><li><p>逻辑结构分类</p><ul><li>通常将集合、树形结构、图状结构归纳为非线性结构。因此，数据的逻辑结构可分为两大类，即线性结构和非线性结构</li></ul></li></ul><h4 id="数据的存储结构" tabindex="-1">数据的存储结构 <a class="header-anchor" href="#数据的存储结构" aria-label="Permalink to &quot;数据的存储结构&quot;">​</a></h4><ul><li><p>概念</p><ul><li>数据的存储结构是指数据在计算机内的表示方法，是逻辑结构的具体实现</li></ul></li><li><p>顺序存储</p><ul><li>将数据元素依次存储于一组地址连续的存储单元中，元素间的逻辑关系由存储单元的位置直接体现，由此得到的存储表示称为顺序存储结构（Sequential Storage Structure）。</li><li>高级语言中，常用一维数组来实现顺序存储结构。</li><li>该方法主要用于线性结构。非线性结构也可通过某种线性化的处理，实现顺序存储。</li></ul></li><li><p>链接存储</p><ul><li>将数据元素存储在一组任意的存储单元中，用附加的指针域表示元素之间的逻辑关系，由此得到的存储表示称为链接存储（Linked Storage Structure）。</li><li>使用这种存储结构时，往往把一个数据元素及附加的指针一起称作一个结点。</li><li>高级语言中，常用指针变量实现链接存储。</li></ul></li><li><p>索引存储</p><ul><li>该方法的特点是在存储数据元素的同时，还可以建立附加的索引表。</li><li>索引表中每一项称为索引项。索引项的一般形式是：（关键字，地址）。</li><li>关键字是指能唯一标识数据元素的数据项。</li><li>若每个数据元素在索引表中均有一个索引项，则该索引表称为稠密索引（Dense Index）。</li><li>若一个索引项对应一组数据元素，则该索引表称为稀疏索引（Sparse Index）。</li></ul></li><li><p>散列存储</p><ul><li>该方法是依据数据元素的关键字，用一个事先设计好的函数计算出该数据元素的存储地址，然后把它存入该地址中。</li><li>这种函数称为散列函数，由散列函数计算出的地址称为散列地址。</li></ul></li><li><p>存储结构的描述</p><ul><li>存储结构的描述与程序设计语言有关。用机器语言描述，则存储结构是数据元素在存储器中的物理位置；用高级语言描述，则不必涉及计算机的内存地址，可用类型说明来描述存储结构。</li></ul></li></ul><h4 id="数据运算" tabindex="-1">数据运算 <a class="header-anchor" href="#数据运算" aria-label="Permalink to &quot;数据运算&quot;">​</a></h4><ul><li><p>概念</p><ul><li>数据运算是对数据施加的操作。每种逻辑结构都有一个基本运算的集合</li></ul></li><li><p>因为这些运算是在逻辑结构上施加的操作，因此它们同逻辑结构一样也是抽象的，只规定“做什么”，无须考虑“如何做”。只有确定存储结构后，才能考虑“如何做”。简言之，运算在逻辑结构上定义，在存储结构上实现。</p></li><li><p>数据结构包含逻辑结构、存储结构和运算三方面的内容</p></li></ul><h4 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h4><ul><li><p>概念</p><ul><li>数据类型（Date Type）是一个值的集合和在这个集合上定义的一组操作的总称</li></ul></li><li><p>原子类型</p><ul><li>其值不可分解</li><li>如C++的基本类型（整型、字符型、实型、枚举型）、指针类型和空类型。</li></ul></li><li><p>结构类型</p><ul><li>其值可分解成若干成分（或称分量）</li><li>如C++的数组类型、结构类型等。结构类型的成分可以是原子类型，也可以是某种结构类型。可以把数据类型看作程序设计语言已实现的数据结构。</li></ul></li><li><p>引入的目的</p><ul><li>从硬件角度考虑，是作为解释计算机内存中信息含义的一种手段</li><li>对用户来说，实现了信息的隐蔽，即将一切用户不必了解的细节都封装在类型中</li></ul></li></ul><h4 id="抽象数据类型" tabindex="-1">抽象数据类型 <a class="header-anchor" href="#抽象数据类型" aria-label="Permalink to &quot;抽象数据类型&quot;">​</a></h4><ul><li><p>概念</p><ul><li>抽象数据类型（Abstract Data Type, ADT）是指一个数学模型，以及定义在该模型上的一组操作</li></ul></li><li><p>抽象数据类型和数据类型实质上是一个概念</p></li><li><p>但在另一方面，抽象数据类型的范畴更广。</p><ul><li>它不再局限于前述各处理器中已定义并实现的数据类型</li><li>还包括用户在设计软件系统时自己定义的数据类型</li></ul></li><li><p>抽象数据结构的特征</p><ul><li>是使用与实现相分离，实行封装的信息隐蔽</li><li>在抽象数据类型设计时，把类型的定义与其实现分离开来。</li></ul></li></ul><h3 id="_1-3-算法和算法分析" tabindex="-1">1.3 算法和算法分析 <a class="header-anchor" href="#_1-3-算法和算法分析" aria-label="Permalink to &quot;1.3 算法和算法分析&quot;">​</a></h3><h2 id="第二章-c-程序设计基础知识" tabindex="-1">第二章 C++程序设计基础知识 <a class="header-anchor" href="#第二章-c-程序设计基础知识" aria-label="Permalink to &quot;第二章 C++程序设计基础知识&quot;">​</a></h2><h3 id="_2-1-c-的基本操作" tabindex="-1">2.1 C++的基本操作 <a class="header-anchor" href="#_2-1-c-的基本操作" aria-label="Permalink to &quot;2.1 C++的基本操作&quot;">​</a></h3><h3 id="_2-2-类与对象" tabindex="-1">2.2 类与对象 <a class="header-anchor" href="#_2-2-类与对象" aria-label="Permalink to &quot;2.2 类与对象&quot;">​</a></h3><h2 id="第三章-线性表" tabindex="-1">第三章 线性表 <a class="header-anchor" href="#第三章-线性表" aria-label="Permalink to &quot;第三章 线性表&quot;">​</a></h2><h3 id="_3-1-线性表的定义及其运算" tabindex="-1">3.1 线性表的定义及其运算 <a class="header-anchor" href="#_3-1-线性表的定义及其运算" aria-label="Permalink to &quot;3.1 线性表的定义及其运算&quot;">​</a></h3><h4 id="_3-1-1-线性表的定义" tabindex="-1">3.1.1 线性表的定义 <a class="header-anchor" href="#_3-1-1-线性表的定义" aria-label="Permalink to &quot;3.1.1 线性表的定义&quot;">​</a></h4><ul><li>概念 <ul><li>线性表是具有相同数据类型的n(n≥0)个数据元素的有限序列，通常记为：（a1, a2, …, ai-1, ai, ai+1,…, an）。其中，n为数据元素个数，称为表长。当n=0时称为空表。</li></ul></li></ul><h4 id="_3-1-2-线性表的运算" tabindex="-1">3.1.2 线性表的运算 <a class="header-anchor" href="#_3-1-2-线性表的运算" aria-label="Permalink to &quot;3.1.2 线性表的运算&quot;">​</a></h4><ul><li><p>（1）线性表初始化：void Initiate()</p><ul><li>初始条件：线性表不存在。</li><li>操作结果：构造一个空的线性表。</li></ul></li><li><p>（2）求线性表的长度：int Length()</p><ul><li>初始条件：线性表已存在。</li><li>操作结果：返回线性表所含数据元素的个数。</li></ul></li><li><p>（3）取表元：DataType Get(int i)</p><ul><li>初始条件：表存在且1≤i≤Length()。</li><li>操作结果：返回线性表的第i个数据元素的值。</li></ul></li><li><p>（4）按值查找：int Locate(DataType x)</p><ul><li>初始条件：线性表已存在，x是给定的一个数据元素。</li><li>操作结果：在线性表中查找值为x的数据元素，返回首次出现的值为x的那个数据元素的序号，称为查找成功；如果未找到值为x的数据元素，返回0表示查找失败。</li></ul></li><li><p>（5）插入操作：int Insert(DataType x, int i)</p><ul><li>初始条件：线性表已存在。</li><li>操作结果：在线性表的第i个位置上插入一个值为x的新元素，使原序号为i,i+1, …,n的数据元素的序号变为i+1,i+2, …,n+1，插入后表长=原表长+1，返回1表示插入成功；若线性表L中数据元素个数少于i-1个，则返回0表示插入失败。</li></ul></li><li><p>（6）删除操作：int Deleted(int i)</p><ul><li>初始条件：线性表已存在。</li><li>操作结果：在线性表L中删除序号为i的数据元素，删除后使序号为i+1, i+2, …, n的元素变为序号i,i+1, …, n-1，新表长=原表长-1，返回1；若线性表中数据元素个数少于i，则返回0表示删除失败。</li></ul></li></ul><h4 id="_3-1-3-线性表的抽象数据结构描述" tabindex="-1">3.1.3 线性表的抽象数据结构描述 <a class="header-anchor" href="#_3-1-3-线性表的抽象数据结构描述" aria-label="Permalink to &quot;3.1.3 线性表的抽象数据结构描述&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ADT  LinearList is</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Data:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">一个线性表L定义为L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a1, a2, …, an)，当L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()时定义为一个空表。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Operation:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Initiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                //线性表初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   //求线性表的长度</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DataType</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //取表元</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Locate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataType</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         //按值查找</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataType</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //插入操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Deleted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             //删除操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">END  LinearList</span></span></code></pre></div><h3 id="_3-2-线性表的顺序存储结构" tabindex="-1">3.2 线性表的顺序存储结构 <a class="header-anchor" href="#_3-2-线性表的顺序存储结构" aria-label="Permalink to &quot;3.2 线性表的顺序存储结构&quot;">​</a></h3><ul><li><p>3.2.1顺序表结构</p><ul><li>存储地址 <ul><li>Loc(ai)=Loc(a1)+(i-1)*d1≤i≤n</li></ul></li><li>数据结构定义 <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MAXSIZE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataType;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SequenList</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Initiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataType</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Deleted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Locate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataType</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      DataType</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      DataType data[MAXSIZE];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ul></li></ul></li><li><p>3.2.2 顺序表运算</p><ul><li>顺序表的初始化 <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SequenList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Initiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li>插入运算 <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SequenList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataType</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //在线性表的第i个数据元素之前插入一个新的数据元素x</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAXSIZE)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;overflow! &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             //数据溢出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              //如果插入位置不合法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;position is not correct! &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          data[j]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               //元素后移</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      data[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        //插入元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                              //表长度增加1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li>删除运算 <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SequenList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deleted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //删除顺序表的第i个数据元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //若删除位置不合法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;position is not correct! &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          data[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data[j];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       //元素前移</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      //表长度减1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li>按值查找 <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SequenList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Locate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataType</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //返回值为x的数据元素的位序值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (data[j]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x))j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li>读取第i个值 <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataType</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SequenList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;position is not correct! &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li>取得数据元素个数 <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SequenList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ul></li><li><p>3.2.3 顺序表存储空间的动态分配</p><ul><li>线性表顺序存储结构 <ul><li>是预先给定大小为MAXSIZE的存储空间</li><li>程序在编译阶段就已经知道该类型变量的大小</li><li>在程序开始运行前会为它分配好存储空间</li><li>因此是一种存储空间的静态分配</li></ul></li><li>动态分配是在定义线性表的存储类型时 <ul><li>不是定义好一个存储空间</li><li>而是只定义一个指针，待程序运行后再申请一个用于存放线性表数据元素的存储空间，</li><li>并把该存储空间的起始地址赋给这个指针。</li></ul></li><li>访问动态存储分配的线性表中的元素和访问静态存储分配的线性表中的元素的情况完全相同，既可以采用指针方式，也可以采用数组下标方式</li></ul></li></ul><h3 id="_3-3-线性表的链式存储结构" tabindex="-1">3.3 线性表的链式存储结构 <a class="header-anchor" href="#_3-3-线性表的链式存储结构" aria-label="Permalink to &quot;3.3 线性表的链式存储结构&quot;">​</a></h3><h4 id="_3-3-1-单链表结构" tabindex="-1">3.3.1 单链表结构 <a class="header-anchor" href="#_3-3-1-单链表结构" aria-label="Permalink to &quot;3.3.1 单链表结构&quot;">​</a></h4><ul><li>结构定义 <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataType;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Item</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      DataType data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Link</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">head;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        //链表头指针</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){head</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 //构造函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ~Link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DeleteAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); }</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             //析构函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Initiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   //初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeleteAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 //删除所有结点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HeadCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           //从头建链表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TailCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           //从尾建链表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HeadCreateWithHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //建立带表头的链表(从头)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TailCreateWithHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //建立带表头的链表(从尾)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     //求链表长度</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Locatex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataType</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //查找值为x的数据元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Locatei</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             //查找第i个元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      DataType</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              //取第i个元素值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataType</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //在链表第i个结点之前插入x</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Deleted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              //删除链表中第i个结点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     //打印链表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span></code></pre></div></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div></li></ul><h4 id="_3-3-2-单链表运算" tabindex="-1">3.3.2 单链表运算 <a class="header-anchor" href="#_3-3-2-单链表运算" aria-label="Permalink to &quot;3.3.2 单链表运算&quot;">​</a></h4><ul><li><p>初始化</p><ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Initiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      DeleteAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      head</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div></li><li><p>建立单链表</p><ul><li>从表尾到表头（不带有空白结点） <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HeadCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DeleteAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s-&gt;data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s-&gt;next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    head</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div></li><li>从表头到表尾建立单链表（不带有空白结点） <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TailCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DeleteAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s-&gt;data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      s-&gt;next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          r-&gt;next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div></li><li>从表尾到表头建立单链表（带有空白结点） <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HeadCreateWithHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DeleteAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p-&gt;next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s-&gt;data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      s-&gt;next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p-&gt;next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      p-&gt;next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    head</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div></li><li>从表头到表尾建立单链表（带有空白结点） <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span></code></pre></div></li></ul> void Link::TailCreateWithHead(int n) { Item ＊s, ＊r, ＊p; int i; DeleteAll(); p=new Item(); p-&gt;next=NULL; r=p; for(i=1; i&lt;=n; i++) { s=new Item(); cin&gt;&gt;s-&gt;data; r-&gt;next=s; r=s; } r-&gt;next=NULL; head= p; }<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div></li></ul></li><li><p>求表长</p></li><li><p>查找操作</p></li><li><p>插入</p></li><li><p>删除</p></li><li><p>打印</p></li><li><p>删除所有结点</p></li></ul><h4 id="_3-3-3-循环链表结构" tabindex="-1">3.3.3 循环链表结构 <a class="header-anchor" href="#_3-3-3-循环链表结构" aria-label="Permalink to &quot;3.3.3 循环链表结构&quot;">​</a></h4><h4 id="_3-3-4-双向链表结构" tabindex="-1">3.3.4 双向链表结构 <a class="header-anchor" href="#_3-3-4-双向链表结构" aria-label="Permalink to &quot;3.3.4 双向链表结构&quot;">​</a></h4><ul><li>定义 <ul><li><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataType;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DualItem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DataType data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DualItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DualItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prior;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        DualItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; prior</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span></code></pre></div></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div></li></ul><h3 id="_3-4-线性表和链式表的比较" tabindex="-1">3.4 线性表和链式表的比较 <a class="header-anchor" href="#_3-4-线性表和链式表的比较" aria-label="Permalink to &quot;3.4 线性表和链式表的比较&quot;">​</a></h3><h4 id="顺序表" tabindex="-1">顺序表 <a class="header-anchor" href="#顺序表" aria-label="Permalink to &quot;顺序表&quot;">​</a></h4><h5 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h5><ul><li>方法简单</li><li>不用为表示结点间的逻辑关系而增加额外的存储开销</li><li>可以按元素序号随机访问表中结点</li></ul><h5 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h5><h4 id="链式表" tabindex="-1">链式表 <a class="header-anchor" href="#链式表" aria-label="Permalink to &quot;链式表&quot;">​</a></h4><h5 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h5><h5 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h5><h3 id="_3-5-算法应用举例" tabindex="-1">3.5 算法应用举例 <a class="header-anchor" href="#_3-5-算法应用举例" aria-label="Permalink to &quot;3.5 算法应用举例&quot;">​</a></h3><h2 id="第四章-栈和队列" tabindex="-1">第四章 栈和队列 <a class="header-anchor" href="#第四章-栈和队列" aria-label="Permalink to &quot;第四章 栈和队列&quot;">​</a></h2><h3 id="_4-1-栈" tabindex="-1">4.1 栈 <a class="header-anchor" href="#_4-1-栈" aria-label="Permalink to &quot;4.1 栈&quot;">​</a></h3><h4 id="_4-1-1-栈的抽象数据类型" tabindex="-1">4.1.1 栈的抽象数据类型 <a class="header-anchor" href="#_4-1-1-栈的抽象数据类型" aria-label="Permalink to &quot;4.1.1 栈的抽象数据类型&quot;">​</a></h4><h4 id="_4-1-2-顺序栈" tabindex="-1">4.1.2 顺序栈 <a class="header-anchor" href="#_4-1-2-顺序栈" aria-label="Permalink to &quot;4.1.2 顺序栈&quot;">​</a></h4><ul><li>（1）判断栈是否为空</li><li>（2）入栈操作</li><li>（3）出栈操作</li><li>（4）取栈顶元素操作</li></ul><h4 id="_4-1-3-链栈" tabindex="-1">4.1.3 链栈 <a class="header-anchor" href="#_4-1-3-链栈" aria-label="Permalink to &quot;4.1.3 链栈&quot;">​</a></h4><ul><li>（1）判断栈是否为空</li><li>（2）入栈操作</li><li>（3）出栈操作</li><li>（4）取栈顶元素操作</li></ul><h4 id="_4-1-4-栈的应用" tabindex="-1">4.1.4 栈的应用 <a class="header-anchor" href="#_4-1-4-栈的应用" aria-label="Permalink to &quot;4.1.4 栈的应用&quot;">​</a></h4><ul><li>“后进先出”</li></ul><h3 id="_4-2-队列" tabindex="-1">4.2 队列 <a class="header-anchor" href="#_4-2-队列" aria-label="Permalink to &quot;4.2 队列&quot;">​</a></h3><h4 id="_4-2-1-队列的抽象数据类型" tabindex="-1">4.2.1 队列的抽象数据类型 <a class="header-anchor" href="#_4-2-1-队列的抽象数据类型" aria-label="Permalink to &quot;4.2.1 队列的抽象数据类型&quot;">​</a></h4><h4 id="_4-2-2-顺序队列" tabindex="-1">4.2.2 顺序队列 <a class="header-anchor" href="#_4-2-2-顺序队列" aria-label="Permalink to &quot;4.2.2 顺序队列&quot;">​</a></h4><h4 id="_4-2-3-链队列" tabindex="-1">4.2.3 链队列 <a class="header-anchor" href="#_4-2-3-链队列" aria-label="Permalink to &quot;4.2.3 链队列&quot;">​</a></h4><ul><li>判断链队列是否为空</li><li>进队操作</li><li>出队操作</li><li>取队头元素操作</li></ul><h4 id="_4-2-4-队列的应用" tabindex="-1">4.2.4 队列的应用 <a class="header-anchor" href="#_4-2-4-队列的应用" aria-label="Permalink to &quot;4.2.4 队列的应用&quot;">​</a></h4><h3 id="_4-3-递归" tabindex="-1">4.3 递归 <a class="header-anchor" href="#_4-3-递归" aria-label="Permalink to &quot;4.3 递归&quot;">​</a></h3><h4 id="_4-3-1-递归算法书写要点及方法" tabindex="-1">4.3.1 递归算法书写要点及方法 <a class="header-anchor" href="#_4-3-1-递归算法书写要点及方法" aria-label="Permalink to &quot;4.3.1 递归算法书写要点及方法&quot;">​</a></h4><h5 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h5><h5 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h5><h4 id="_4-3-2-递归过程的调用和返回" tabindex="-1">4.3.2 递归过程的调用和返回 <a class="header-anchor" href="#_4-3-2-递归过程的调用和返回" aria-label="Permalink to &quot;4.3.2 递归过程的调用和返回&quot;">​</a></h4><h2 id="第五章-串" tabindex="-1">第五章 串 <a class="header-anchor" href="#第五章-串" aria-label="Permalink to &quot;第五章 串&quot;">​</a></h2><h3 id="_5-1-c-语言的字符和字符串" tabindex="-1">5.1 C++语言的字符和字符串 <a class="header-anchor" href="#_5-1-c-语言的字符和字符串" aria-label="Permalink to &quot;5.1 C++语言的字符和字符串&quot;">​</a></h3><h4 id="_5-1-1-c-语言的字符和字符串" tabindex="-1">5.1.1 C++语言的字符和字符串 <a class="header-anchor" href="#_5-1-1-c-语言的字符和字符串" aria-label="Permalink to &quot;5.1.1 C++语言的字符和字符串&quot;">​</a></h4><h4 id="_5-1-2-一个简单的c-函数" tabindex="-1">5.1.2 一个简单的C++函数 <a class="header-anchor" href="#_5-1-2-一个简单的c-函数" aria-label="Permalink to &quot;5.1.2 一个简单的C++函数&quot;">​</a></h4><h3 id="_5-2-串及其基本运算" tabindex="-1">5.2 串及其基本运算 <a class="header-anchor" href="#_5-2-串及其基本运算" aria-label="Permalink to &quot;5.2 串及其基本运算&quot;">​</a></h3><h4 id="_5-2-1-串的基本概念" tabindex="-1">5.2.1 串的基本概念 <a class="header-anchor" href="#_5-2-1-串的基本概念" aria-label="Permalink to &quot;5.2.1 串的基本概念&quot;">​</a></h4><ul><li>1.串的定义 串是由0个或多个任意字符组成的字符序列</li><li>2.几个术语</li></ul><h4 id="_5-2-2-串的基本算法" tabindex="-1">5.2.2 串的基本算法 <a class="header-anchor" href="#_5-2-2-串的基本算法" aria-label="Permalink to &quot;5.2.2 串的基本算法&quot;">​</a></h4><ul><li>（1）求串的长度</li><li>（2）串赋值StrAssign(s1, s2)</li><li>（3）链接操作StrConcat(s1, s2, s)或StrConcat(s1, s2)</li><li>（4）求子串SubStr(s, i, len)</li><li>（5）串比较StrCmp(s1, s2)</li><li>（6）子串定位StrIndex(s, t)</li><li>（7）串插入StrInsert(s, i, t)</li><li>（8）串删除StrDelete(s, i, len)</li><li>（9）串替换StrRep(s, t ,r)</li></ul><h3 id="_5-3-串的顺序存储及其基本运算" tabindex="-1">5.3 串的顺序存储及其基本运算 <a class="header-anchor" href="#_5-3-串的顺序存储及其基本运算" aria-label="Permalink to &quot;5.3 串的顺序存储及其基本运算&quot;">​</a></h3><h4 id="_5-3-1-串的定长顺序存储" tabindex="-1">5.3.1 串的定长顺序存储 <a class="header-anchor" href="#_5-3-1-串的定长顺序存储" aria-label="Permalink to &quot;5.3.1 串的定长顺序存储&quot;">​</a></h4><h4 id="_5-3-2-顺序串的数据类型定义" tabindex="-1">5.3.2 顺序串的数据类型定义 <a class="header-anchor" href="#_5-3-2-顺序串的数据类型定义" aria-label="Permalink to &quot;5.3.2 顺序串的数据类型定义&quot;">​</a></h4><h4 id="_5-3-3-定长顺序串的基本运算" tabindex="-1">5.3.3 定长顺序串的基本运算 <a class="header-anchor" href="#_5-3-3-定长顺序串的基本运算" aria-label="Permalink to &quot;5.3.3 定长顺序串的基本运算&quot;">​</a></h4><ul><li>1.求串长</li><li>2.串连接</li><li>3.求子串</li><li>4.串比较</li></ul><h4 id="_5-3-4-模式匹配" tabindex="-1">5.3.4 模式匹配 <a class="header-anchor" href="#_5-3-4-模式匹配" aria-label="Permalink to &quot;5.3.4 模式匹配&quot;">​</a></h4><ul><li><h2 id="_1-简单的模式匹配算法" tabindex="-1">1.简单的模式匹配算法 <a class="header-anchor" href="#_1-简单的模式匹配算法" aria-label="Permalink to &quot;1.简单的模式匹配算法&quot;">​</a></h2></li><li>2.改进后的模式匹配算法 <ul><li>KMP</li></ul></li></ul><h3 id="_5-4-串的链式存储结构" tabindex="-1">5.4 串的链式存储结构 <a class="header-anchor" href="#_5-4-串的链式存储结构" aria-label="Permalink to &quot;5.4 串的链式存储结构&quot;">​</a></h3><ul><li>结构中的每个数据元素是一个字符</li><li>串值的存储密度 <ul><li>存储密度=串值所占的存储位/实际分配的存储位</li></ul></li></ul><h3 id="_5-5-串操作应用" tabindex="-1">5.5 串操作应用 <a class="header-anchor" href="#_5-5-串操作应用" aria-label="Permalink to &quot;5.5 串操作应用&quot;">​</a></h3><h2 id="第六章-数组和广义表" tabindex="-1">第六章 数组和广义表 <a class="header-anchor" href="#第六章-数组和广义表" aria-label="Permalink to &quot;第六章 数组和广义表&quot;">​</a></h2><h3 id="_6-1-数组" tabindex="-1">6.1 数组 <a class="header-anchor" href="#_6-1-数组" aria-label="Permalink to &quot;6.1 数组&quot;">​</a></h3><h4 id="_6-1-1-数组的定义" tabindex="-1">6.1.1 数组的定义 <a class="header-anchor" href="#_6-1-1-数组的定义" aria-label="Permalink to &quot;6.1.1 数组的定义&quot;">​</a></h4><ul><li>特点 <ul><li>（1）数组中的数据元素具有相同的数据类型</li><li>（2）数组是一种随机存储结构，可以根据给定的一组下标直接访问对应的数组元素</li><li>（3）一旦建立了数组，则数组中的数据元素个数和元素之间的关系就不再发生变化</li></ul></li></ul><h4 id="_6-1-2-数组的内存映像" tabindex="-1">6.1.2 数组的内存映像 <a class="header-anchor" href="#_6-1-2-数组的内存映像" aria-label="Permalink to &quot;6.1.2 数组的内存映像&quot;">​</a></h4><h3 id="_6-2-特殊矩阵的压缩存储" tabindex="-1">6.2 特殊矩阵的压缩存储 <a class="header-anchor" href="#_6-2-特殊矩阵的压缩存储" aria-label="Permalink to &quot;6.2 特殊矩阵的压缩存储&quot;">​</a></h3><h4 id="_6-2-1-对称矩阵" tabindex="-1">6.2.1 对称矩阵 <a class="header-anchor" href="#_6-2-1-对称矩阵" aria-label="Permalink to &quot;6.2.1 对称矩阵&quot;">​</a></h4><h4 id="_6-2-2-三角矩阵" tabindex="-1">6.2.2 三角矩阵 <a class="header-anchor" href="#_6-2-2-三角矩阵" aria-label="Permalink to &quot;6.2.2 三角矩阵&quot;">​</a></h4><h4 id="_6-2-3-稀疏矩阵" tabindex="-1">6.2.3 稀疏矩阵 <a class="header-anchor" href="#_6-2-3-稀疏矩阵" aria-label="Permalink to &quot;6.2.3 稀疏矩阵&quot;">​</a></h4><h3 id="_6-3-广义表" tabindex="-1">6.3 广义表 <a class="header-anchor" href="#_6-3-广义表" aria-label="Permalink to &quot;6.3 广义表&quot;">​</a></h3><h4 id="_6-3-1-广义表的定义" tabindex="-1">6.3.1 广义表的定义 <a class="header-anchor" href="#_6-3-1-广义表的定义" aria-label="Permalink to &quot;6.3.1 广义表的定义&quot;">​</a></h4><h4 id="_6-3-2-广义表的存储" tabindex="-1">6.3.2 广义表的存储 <a class="header-anchor" href="#_6-3-2-广义表的存储" aria-label="Permalink to &quot;6.3.2 广义表的存储&quot;">​</a></h4><h4 id="_6-3-3-广义表基本操作的实现" tabindex="-1">6.3.3 广义表基本操作的实现 <a class="header-anchor" href="#_6-3-3-广义表基本操作的实现" aria-label="Permalink to &quot;6.3.3 广义表基本操作的实现&quot;">​</a></h4><h2 id="第七章-树和二叉树" tabindex="-1">第七章 树和二叉树 <a class="header-anchor" href="#第七章-树和二叉树" aria-label="Permalink to &quot;第七章 树和二叉树&quot;">​</a></h2><h3 id="_7-1-树的基本概念" tabindex="-1">7.1 树的基本概念 <a class="header-anchor" href="#_7-1-树的基本概念" aria-label="Permalink to &quot;7.1 树的基本概念&quot;">​</a></h3><h4 id="_7-1-1-树的定义及其表示" tabindex="-1">7.1.1 树的定义及其表示 <a class="header-anchor" href="#_7-1-1-树的定义及其表示" aria-label="Permalink to &quot;7.1.1 树的定义及其表示&quot;">​</a></h4><h4 id="_7-1-2-基本术语" tabindex="-1">7.1.2 基本术语 <a class="header-anchor" href="#_7-1-2-基本术语" aria-label="Permalink to &quot;7.1.2 基本术语&quot;">​</a></h4><h3 id="_7-2-二叉树" tabindex="-1">7.2 二叉树 <a class="header-anchor" href="#_7-2-二叉树" aria-label="Permalink to &quot;7.2 二叉树&quot;">​</a></h3><h4 id="_7-2-1-二叉树的定义" tabindex="-1">7.2.1 二叉树的定义 <a class="header-anchor" href="#_7-2-1-二叉树的定义" aria-label="Permalink to &quot;7.2.1 二叉树的定义&quot;">​</a></h4><h4 id="_7-2-2-二叉树的性质" tabindex="-1">7.2.2 二叉树的性质 <a class="header-anchor" href="#_7-2-2-二叉树的性质" aria-label="Permalink to &quot;7.2.2 二叉树的性质&quot;">​</a></h4><h4 id="_7-2-3-二叉树的存储结构" tabindex="-1">7.2.3 二叉树的存储结构 <a class="header-anchor" href="#_7-2-3-二叉树的存储结构" aria-label="Permalink to &quot;7.2.3 二叉树的存储结构&quot;">​</a></h4><h4 id="_7-2-4-二叉树抽象数据类型" tabindex="-1">7.2.4 二叉树抽象数据类型 <a class="header-anchor" href="#_7-2-4-二叉树抽象数据类型" aria-label="Permalink to &quot;7.2.4 二叉树抽象数据类型&quot;">​</a></h4><h3 id="_7-3-遍历二叉树" tabindex="-1">7.3 遍历二叉树 <a class="header-anchor" href="#_7-3-遍历二叉树" aria-label="Permalink to &quot;7.3 遍历二叉树&quot;">​</a></h3><h4 id="_7-3-1-先序遍历" tabindex="-1">7.3.1 先序遍历 <a class="header-anchor" href="#_7-3-1-先序遍历" aria-label="Permalink to &quot;7.3.1 先序遍历&quot;">​</a></h4><h4 id="_7-3-2-中序遍历" tabindex="-1">7.3.2 中序遍历 <a class="header-anchor" href="#_7-3-2-中序遍历" aria-label="Permalink to &quot;7.3.2 中序遍历&quot;">​</a></h4><h4 id="_7-3-3-后序遍历" tabindex="-1">7.3.3 后序遍历 <a class="header-anchor" href="#_7-3-3-后序遍历" aria-label="Permalink to &quot;7.3.3 后序遍历&quot;">​</a></h4><h4 id="_7-3-4-按层序遍历二叉树" tabindex="-1">7.3.4 按层序遍历二叉树 <a class="header-anchor" href="#_7-3-4-按层序遍历二叉树" aria-label="Permalink to &quot;7.3.4 按层序遍历二叉树&quot;">​</a></h4><h4 id="_7-3-5-遍历算法的应用举例" tabindex="-1">7.3.5 遍历算法的应用举例 <a class="header-anchor" href="#_7-3-5-遍历算法的应用举例" aria-label="Permalink to &quot;7.3.5 遍历算法的应用举例&quot;">​</a></h4><h3 id="_7-4-线索二叉树" tabindex="-1">7.4 线索二叉树 <a class="header-anchor" href="#_7-4-线索二叉树" aria-label="Permalink to &quot;7.4 线索二叉树&quot;">​</a></h3><h4 id="_7-4-1-线索的概念" tabindex="-1">7.4.1 线索的概念 <a class="header-anchor" href="#_7-4-1-线索的概念" aria-label="Permalink to &quot;7.4.1 线索的概念&quot;">​</a></h4><h4 id="_7-4-2-线索的描述" tabindex="-1">7.4.2 线索的描述 <a class="header-anchor" href="#_7-4-2-线索的描述" aria-label="Permalink to &quot;7.4.2 线索的描述&quot;">​</a></h4><h4 id="_7-4-3-线索的算法实现" tabindex="-1">7.4.3 线索的算法实现 <a class="header-anchor" href="#_7-4-3-线索的算法实现" aria-label="Permalink to &quot;7.4.3 线索的算法实现&quot;">​</a></h4><h4 id="_7-4-4-线索二叉树上的运算" tabindex="-1">7.4.4 线索二叉树上的运算 <a class="header-anchor" href="#_7-4-4-线索二叉树上的运算" aria-label="Permalink to &quot;7.4.4 线索二叉树上的运算&quot;">​</a></h4><h3 id="_7-5-树与森林" tabindex="-1">7.5 树与森林 <a class="header-anchor" href="#_7-5-树与森林" aria-label="Permalink to &quot;7.5 树与森林&quot;">​</a></h3><h4 id="_7-5-1-树的存储结构" tabindex="-1">7.5.1 树的存储结构 <a class="header-anchor" href="#_7-5-1-树的存储结构" aria-label="Permalink to &quot;7.5.1 树的存储结构&quot;">​</a></h4><h4 id="_7-5-2-树、森林和二叉树的转换" tabindex="-1">7.5.2 树、森林和二叉树的转换 <a class="header-anchor" href="#_7-5-2-树、森林和二叉树的转换" aria-label="Permalink to &quot;7.5.2 树、森林和二叉树的转换&quot;">​</a></h4><h4 id="_7-5-3-树和森林的遍历" tabindex="-1">7.5.3 树和森林的遍历 <a class="header-anchor" href="#_7-5-3-树和森林的遍历" aria-label="Permalink to &quot;7.5.3 树和森林的遍历&quot;">​</a></h4><h3 id="_7-6-哈夫曼树" tabindex="-1">7.6 哈夫曼树 <a class="header-anchor" href="#_7-6-哈夫曼树" aria-label="Permalink to &quot;7.6 哈夫曼树&quot;">​</a></h3><h4 id="_7-6-1-基本术语" tabindex="-1">7.6.1 基本术语 <a class="header-anchor" href="#_7-6-1-基本术语" aria-label="Permalink to &quot;7.6.1 基本术语&quot;">​</a></h4><h4 id="_7-6-2-哈夫曼树的建立" tabindex="-1">7.6.2 哈夫曼树的建立 <a class="header-anchor" href="#_7-6-2-哈夫曼树的建立" aria-label="Permalink to &quot;7.6.2 哈夫曼树的建立&quot;">​</a></h4><h4 id="_7-6-3-哈夫曼树的应用" tabindex="-1">7.6.3 哈夫曼树的应用 <a class="header-anchor" href="#_7-6-3-哈夫曼树的应用" aria-label="Permalink to &quot;7.6.3 哈夫曼树的应用&quot;">​</a></h4><h2 id="第八章-图" tabindex="-1">第八章 图 <a class="header-anchor" href="#第八章-图" aria-label="Permalink to &quot;第八章 图&quot;">​</a></h2><h3 id="_8-1-图的基本概念" tabindex="-1">8.1 图的基本概念 <a class="header-anchor" href="#_8-1-图的基本概念" aria-label="Permalink to &quot;8.1 图的基本概念&quot;">​</a></h3><h4 id="_8-1-1-图的定义和术语" tabindex="-1">8.1.1 图的定义和术语 <a class="header-anchor" href="#_8-1-1-图的定义和术语" aria-label="Permalink to &quot;8.1.1 图的定义和术语&quot;">​</a></h4><h4 id="_8-1-2-图的基本操作" tabindex="-1">8.1.2 图的基本操作 <a class="header-anchor" href="#_8-1-2-图的基本操作" aria-label="Permalink to &quot;8.1.2 图的基本操作&quot;">​</a></h4><h3 id="_8-2-图的存储结构" tabindex="-1">8.2 图的存储结构 <a class="header-anchor" href="#_8-2-图的存储结构" aria-label="Permalink to &quot;8.2 图的存储结构&quot;">​</a></h3><h4 id="_8-2-1-邻接矩阵" tabindex="-1">8.2.1 邻接矩阵 <a class="header-anchor" href="#_8-2-1-邻接矩阵" aria-label="Permalink to &quot;8.2.1 邻接矩阵&quot;">​</a></h4><h4 id="_8-2-2-邻接表" tabindex="-1">8.2.2 邻接表 <a class="header-anchor" href="#_8-2-2-邻接表" aria-label="Permalink to &quot;8.2.2 邻接表&quot;">​</a></h4><h4 id="_8-2-3-十字链表" tabindex="-1">8.2.3 十字链表 <a class="header-anchor" href="#_8-2-3-十字链表" aria-label="Permalink to &quot;8.2.3 十字链表&quot;">​</a></h4><h4 id="_8-2-4-邻接多重表" tabindex="-1">8.2.4 邻接多重表 <a class="header-anchor" href="#_8-2-4-邻接多重表" aria-label="Permalink to &quot;8.2.4 邻接多重表&quot;">​</a></h4><h3 id="_8-3-图的遍历" tabindex="-1">8.3 图的遍历 <a class="header-anchor" href="#_8-3-图的遍历" aria-label="Permalink to &quot;8.3 图的遍历&quot;">​</a></h3><h4 id="_8-3-1-深度优先搜索" tabindex="-1">8.3.1 深度优先搜索 <a class="header-anchor" href="#_8-3-1-深度优先搜索" aria-label="Permalink to &quot;8.3.1 深度优先搜索&quot;">​</a></h4><h4 id="_8-3-2-广度优先搜索" tabindex="-1">8.3.2 广度优先搜索 <a class="header-anchor" href="#_8-3-2-广度优先搜索" aria-label="Permalink to &quot;8.3.2 广度优先搜索&quot;">​</a></h4><h4 id="_8-3-3-应用图的遍历判定图的连通性" tabindex="-1">8.3.3 应用图的遍历判定图的连通性 <a class="header-anchor" href="#_8-3-3-应用图的遍历判定图的连通性" aria-label="Permalink to &quot;8.3.3 应用图的遍历判定图的连通性&quot;">​</a></h4><h4 id="_8-3-4-图的遍历的其他应用" tabindex="-1">8.3.4 图的遍历的其他应用 <a class="header-anchor" href="#_8-3-4-图的遍历的其他应用" aria-label="Permalink to &quot;8.3.4 图的遍历的其他应用&quot;">​</a></h4><h3 id="_8-4-生成树和最小生成树" tabindex="-1">8.4 生成树和最小生成树 <a class="header-anchor" href="#_8-4-生成树和最小生成树" aria-label="Permalink to &quot;8.4 生成树和最小生成树&quot;">​</a></h3><h4 id="_8-4-1-生成树及生成森林" tabindex="-1">8.4.1 生成树及生成森林 <a class="header-anchor" href="#_8-4-1-生成树及生成森林" aria-label="Permalink to &quot;8.4.1 生成树及生成森林&quot;">​</a></h4><h4 id="_8-4-2-最小生成树的概念" tabindex="-1">8.4.2 最小生成树的概念 <a class="header-anchor" href="#_8-4-2-最小生成树的概念" aria-label="Permalink to &quot;8.4.2 最小生成树的概念&quot;">​</a></h4><h4 id="_8-4-3-构造最小生成树的prim算法" tabindex="-1">8.4.3 构造最小生成树的Prim算法 <a class="header-anchor" href="#_8-4-3-构造最小生成树的prim算法" aria-label="Permalink to &quot;8.4.3 构造最小生成树的Prim算法&quot;">​</a></h4><h4 id="_8-4-4-构造最小生成树的kruskal算法" tabindex="-1">8.4.4 构造最小生成树的Kruskal算法 <a class="header-anchor" href="#_8-4-4-构造最小生成树的kruskal算法" aria-label="Permalink to &quot;8.4.4 构造最小生成树的Kruskal算法&quot;">​</a></h4><h3 id="_8-5-最短路径" tabindex="-1">8.5 最短路径 <a class="header-anchor" href="#_8-5-最短路径" aria-label="Permalink to &quot;8.5 最短路径&quot;">​</a></h3><h4 id="_8-5-1-单源点的最短路径" tabindex="-1">8.5.1 单源点的最短路径 <a class="header-anchor" href="#_8-5-1-单源点的最短路径" aria-label="Permalink to &quot;8.5.1 单源点的最短路径&quot;">​</a></h4><h4 id="_8-5-2-每对顶点之间的最短路径" tabindex="-1">8.5.2 每对顶点之间的最短路径 <a class="header-anchor" href="#_8-5-2-每对顶点之间的最短路径" aria-label="Permalink to &quot;8.5.2 每对顶点之间的最短路径&quot;">​</a></h4><h3 id="_8-6-有向无环图及其应用" tabindex="-1">8.6 有向无环图及其应用 <a class="header-anchor" href="#_8-6-有向无环图及其应用" aria-label="Permalink to &quot;8.6 有向无环图及其应用&quot;">​</a></h3><h4 id="_8-6-1-有向无环图的概念" tabindex="-1">8.6.1 有向无环图的概念 <a class="header-anchor" href="#_8-6-1-有向无环图的概念" aria-label="Permalink to &quot;8.6.1 有向无环图的概念&quot;">​</a></h4><h4 id="_8-6-2-aov网与拓扑排序" tabindex="-1">8.6.2 AOV网与拓扑排序 <a class="header-anchor" href="#_8-6-2-aov网与拓扑排序" aria-label="Permalink to &quot;8.6.2 AOV网与拓扑排序&quot;">​</a></h4><h4 id="_8-6-3-aoe网与关键路径" tabindex="-1">8.6.3 AOE网与关键路径 <a class="header-anchor" href="#_8-6-3-aoe网与关键路径" aria-label="Permalink to &quot;8.6.3 AOE网与关键路径&quot;">​</a></h4><h2 id="第九章-查找" tabindex="-1">第九章 查找 <a class="header-anchor" href="#第九章-查找" aria-label="Permalink to &quot;第九章 查找&quot;">​</a></h2><h3 id="_9-1-基本概念" tabindex="-1">9.1 基本概念 <a class="header-anchor" href="#_9-1-基本概念" aria-label="Permalink to &quot;9.1 基本概念&quot;">​</a></h3><h3 id="_9-2-静态查找表" tabindex="-1">9.2 静态查找表 <a class="header-anchor" href="#_9-2-静态查找表" aria-label="Permalink to &quot;9.2 静态查找表&quot;">​</a></h3><h4 id="_9-2-1-顺序查找" tabindex="-1">9.2.1 顺序查找 <a class="header-anchor" href="#_9-2-1-顺序查找" aria-label="Permalink to &quot;9.2.1 顺序查找&quot;">​</a></h4><h4 id="_9-2-2-有序表的查找" tabindex="-1">9.2.2 有序表的查找 <a class="header-anchor" href="#_9-2-2-有序表的查找" aria-label="Permalink to &quot;9.2.2 有序表的查找&quot;">​</a></h4><h4 id="_9-2-3-分块查找" tabindex="-1">9.2.3 分块查找 <a class="header-anchor" href="#_9-2-3-分块查找" aria-label="Permalink to &quot;9.2.3 分块查找&quot;">​</a></h4><h3 id="_9-3-动态查找表i——数表查找" tabindex="-1">9.3 动态查找表I——数表查找 <a class="header-anchor" href="#_9-3-动态查找表i——数表查找" aria-label="Permalink to &quot;9.3 动态查找表I——数表查找&quot;">​</a></h3><h4 id="_9-3-1-二叉排序树" tabindex="-1">9.3.1 二叉排序树 <a class="header-anchor" href="#_9-3-1-二叉排序树" aria-label="Permalink to &quot;9.3.1 二叉排序树&quot;">​</a></h4><h4 id="_9-3-2-平衡二叉树-avl树" tabindex="-1">9.3.2 平衡二叉树（AVL树） <a class="header-anchor" href="#_9-3-2-平衡二叉树-avl树" aria-label="Permalink to &quot;9.3.2 平衡二叉树（AVL树）&quot;">​</a></h4><h4 id="_9-3-3-b-树和b-树" tabindex="-1">9.3.3 B-树和B+树 <a class="header-anchor" href="#_9-3-3-b-树和b-树" aria-label="Permalink to &quot;9.3.3 B-树和B+树&quot;">​</a></h4><h3 id="_9-4-动态查找表ii——哈希表查找-杂凑法" tabindex="-1">9.4 动态查找表II——哈希表查找（杂凑法） <a class="header-anchor" href="#_9-4-动态查找表ii——哈希表查找-杂凑法" aria-label="Permalink to &quot;9.4 动态查找表II——哈希表查找（杂凑法）&quot;">​</a></h3><h4 id="_9-4-1-常用的哈希方法" tabindex="-1">9.4.1 常用的哈希方法 <a class="header-anchor" href="#_9-4-1-常用的哈希方法" aria-label="Permalink to &quot;9.4.1 常用的哈希方法&quot;">​</a></h4><h4 id="_9-4-2-处理冲突的方法" tabindex="-1">9.4.2 处理冲突的方法 <a class="header-anchor" href="#_9-4-2-处理冲突的方法" aria-label="Permalink to &quot;9.4.2 处理冲突的方法&quot;">​</a></h4><h4 id="_9-4-3-哈希表的操作" tabindex="-1">9.4.3 哈希表的操作 <a class="header-anchor" href="#_9-4-3-哈希表的操作" aria-label="Permalink to &quot;9.4.3 哈希表的操作&quot;">​</a></h4><h2 id="第十章-排序" tabindex="-1">第十章 排序 <a class="header-anchor" href="#第十章-排序" aria-label="Permalink to &quot;第十章 排序&quot;">​</a></h2><h3 id="_10-1-基本概念" tabindex="-1">10.1 基本概念 <a class="header-anchor" href="#_10-1-基本概念" aria-label="Permalink to &quot;10.1 基本概念&quot;">​</a></h3><h3 id="_10-2-插入排序" tabindex="-1">10.2 插入排序 <a class="header-anchor" href="#_10-2-插入排序" aria-label="Permalink to &quot;10.2 插入排序&quot;">​</a></h3><h4 id="_10-2-1-直接插入排序" tabindex="-1">10.2.1 直接插入排序 <a class="header-anchor" href="#_10-2-1-直接插入排序" aria-label="Permalink to &quot;10.2.1 直接插入排序&quot;">​</a></h4><h4 id="_10-2-2-二分插入排序" tabindex="-1">10.2.2 二分插入排序 <a class="header-anchor" href="#_10-2-2-二分插入排序" aria-label="Permalink to &quot;10.2.2 二分插入排序&quot;">​</a></h4><h4 id="_10-2-3-希尔排序" tabindex="-1">10.2.3 希尔排序 <a class="header-anchor" href="#_10-2-3-希尔排序" aria-label="Permalink to &quot;10.2.3 希尔排序&quot;">​</a></h4><h3 id="_10-3-交换排序" tabindex="-1">10.3 交换排序 <a class="header-anchor" href="#_10-3-交换排序" aria-label="Permalink to &quot;10.3 交换排序&quot;">​</a></h3><h4 id="_10-3-1-冒泡排序" tabindex="-1">10.3.1 冒泡排序 <a class="header-anchor" href="#_10-3-1-冒泡排序" aria-label="Permalink to &quot;10.3.1 冒泡排序&quot;">​</a></h4><h4 id="_10-3-2-快速排序" tabindex="-1">10.3.2 快速排序 <a class="header-anchor" href="#_10-3-2-快速排序" aria-label="Permalink to &quot;10.3.2 快速排序&quot;">​</a></h4><h3 id="_10-4-选择排序" tabindex="-1">10.4 选择排序 <a class="header-anchor" href="#_10-4-选择排序" aria-label="Permalink to &quot;10.4 选择排序&quot;">​</a></h3><h4 id="_10-4-1-简单选择排序" tabindex="-1">10.4.1 简单选择排序 <a class="header-anchor" href="#_10-4-1-简单选择排序" aria-label="Permalink to &quot;10.4.1 简单选择排序&quot;">​</a></h4><h4 id="_10-4-2-属性选择排序" tabindex="-1">10.4.2 属性选择排序 <a class="header-anchor" href="#_10-4-2-属性选择排序" aria-label="Permalink to &quot;10.4.2 属性选择排序&quot;">​</a></h4><h4 id="_10-4-3-堆排序" tabindex="-1">10.4.3 堆排序 <a class="header-anchor" href="#_10-4-3-堆排序" aria-label="Permalink to &quot;10.4.3 堆排序&quot;">​</a></h4><h3 id="_10-5-归并排序" tabindex="-1">10.5 归并排序 <a class="header-anchor" href="#_10-5-归并排序" aria-label="Permalink to &quot;10.5 归并排序&quot;">​</a></h3><h3 id="_10-6-分配排序" tabindex="-1">10.6 分配排序 <a class="header-anchor" href="#_10-6-分配排序" aria-label="Permalink to &quot;10.6 分配排序&quot;">​</a></h3><h4 id="_10-6-1-多关键码排序" tabindex="-1">10.6.1 多关键码排序 <a class="header-anchor" href="#_10-6-1-多关键码排序" aria-label="Permalink to &quot;10.6.1 多关键码排序&quot;">​</a></h4><h4 id="_10-6-2链式基数排序" tabindex="-1">10.6.2链式基数排序 <a class="header-anchor" href="#_10-6-2链式基数排序" aria-label="Permalink to &quot;10.6.2链式基数排序&quot;">​</a></h4><h3 id="_10-7-各种内排序方法的比较和选择" tabindex="-1">10.7 各种内排序方法的比较和选择 <a class="header-anchor" href="#_10-7-各种内排序方法的比较和选择" aria-label="Permalink to &quot;10.7 各种内排序方法的比较和选择&quot;">​</a></h3>`,189),t=[n];function e(k,p,r,d,E,o){return s(),a("div",{"data-pagefind-body":!0},t)}const y=i(h,[["render",e]]);export{c as __pageData,y as default};
